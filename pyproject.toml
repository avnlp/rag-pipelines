[project]
name = "rag-pipelines"
version = "0.1.0"
description = "Advanced Retrieval Augmented Generation Pipelines"
readme = "README.md"
authors = [
    {name = "Ashwin Mathur", email = ""},
    {name = "Varun Mathur", email = ""},
]
license = "MIT"
repository = "https://github.com/avnlp/rag-pipelines"
requires-python = ">=3.12"
dependencies = [
    "langchain-core",
    "langgraph",
    "langchain-text-splitters",
    "langchain-experimental",
    "langchain-huggingface",
    "langchain-groq",
    "langchain-milvus",
    "weave",
    "edgartools",
    "fastembed",
    "unstructured[pdf]",
    "deepeval",
    "arize-phoenix",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "codecov>=2.1.13",
    "mypy>=1.14.1",
    "nbqa>=1.9.1",
    "pip-audit>=2.7.3",
    "pre-commit>=4.1.0",
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.2",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "ruff>=0.9.2",
]
docs = [
    "jinja2>=3.1.6", # Pinning version to address vulnerability GHSA-cpwx-vrp4-4pq7
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.15",
    "mkdocstrings>=0.24.1",
    "mkdocstrings-python>=1.10.0",
    "ipykernel>=6.29.5",
    "ipython>=8.31.0",
]

# Default dependency groups to be installed
[tool.uv]
default-groups = ["dev", "docs"]

[tool.mypy]
follow_imports = "normal"
ignore_missing_imports = false
install_types = true
pretty = true
non_interactive = true
allow_untyped_defs = false
no_implicit_optional = true
check_untyped_defs = true
namespace_packages = true
explicit_package_bases = true
warn_unused_configs = true
allow_subclassing_any = false
allow_untyped_calls = false
allow_incomplete_defs = false
allow_untyped_decorators = false
warn_redundant_casts = true
warn_unused_ignores = true
implicit_reexport = false
strict_equality = true
extra_checks = true
mypy_path = "src"

[tool.ruff]
include = ["*.py", "pyproject.toml", "*.ipynb"]
exclude = []
line-length = 88

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true

[tool.ruff.lint]
select = [
    "A", # flake8-builtins
    "B", # flake8-bugbear
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "D", # pydocstyle
    "E", # pycodestyle
    "F", # pyflakes
    "I", # isort
    "W", # pycodestyle
    "N", # pep8-naming
    "ERA", # eradicate
    "PL", # pylint
]
fixable = ["A", "B", "COM", "C4", "RET", "SIM", "ICN", "Q", "RSE", "D", "E", "F", "I", "W", "N", "ERA", "PL"]
ignore = [
    "B905", # `zip()` without an explicit `strict=` parameter
    "E501", # line too long
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "PLR2004", # Replace magic number with named constant
    "PLR0913", # Too many arguments
    "COM812", # Missing trailing comma
    "ERA001", # Found commented-out code (too many false positives with math comments)
    "A001", # Ignore variable `input` is shadowing a Python builtin (common for torch)
    "A002", # Ignore variable `input` is shadowing a Python builtin in function (common for torch)
    "D301", # r-strings for docstrings with backslashes
]

# Ignore import violations in all `__init__.py` files.
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401", "F403", "F811"]
# Ignoring undocumented public functions, public init, magic method, and magic numbers in tests folder
"tests/*" = ["D103", "D105", "D107"]


[tool.ruff.lint.pep8-naming]
ignore-names = ["X*", "setUp"]

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.pytest.ini_options]
markers = [
    "integration_test: marks tests as integration tests",
]

[tool.coverage]
    [tool.coverage.run]
    source=["rag_pipelines"]
    omit=["tests/*", "*__init__.py"]
